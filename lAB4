{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "e7de5209-6ba1-4b5b-be11-2cfa670348d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    Weather  Temperature  Play\n",
      "0         2            1     0\n",
      "1         2            1     0\n",
      "2         0            1     1\n",
      "3         1            2     1\n",
      "4         1            0     1\n",
      "5         1            0     0\n",
      "6         0            0     1\n",
      "7         2            2     0\n",
      "8         2            0     1\n",
      "9         1            2     1\n",
      "10        2            2     1\n",
      "11        0            2     1\n",
      "12        0            1     1\n",
      "13        1            2     0\n",
      "Prediction for Weather=overcast, Temperature=mild: yes\n",
      "Confusion Matrix:\n",
      "[[1 1]\n",
      " [1 2]]\n",
      "Accuracy: 0.60\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.metrics import confusion_matrix, accuracy_score\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "# Define the dataset\n",
    "data = {\n",
    "    'Weather': ['sunny', 'sunny', 'overcast', 'rainy', 'rainy', 'rainy', 'overcast', 'sunny', 'sunny', 'rainy', 'sunny', 'overcast', 'overcast', 'rainy'],\n",
    "    'Temperature': ['hot', 'hot', 'hot', 'mild', 'cool', 'cool', 'cool', 'mild', 'cool', 'mild', 'mild', 'mild', 'hot', 'mild'],\n",
    "    'Play': ['no', 'no', 'yes', 'yes', 'yes', 'no', 'yes', 'no', 'yes', 'yes', 'yes', 'yes', 'yes', 'no']\n",
    "}\n",
    "\n",
    "# Convert the dataset into a DataFrame\n",
    "df = pd.DataFrame(data)\n",
    "\n",
    "# Encode categorical variables (Weather, Temperature, Play)\n",
    "le_weather = LabelEncoder()\n",
    "le_temp = LabelEncoder()\n",
    "le_play = LabelEncoder()\n",
    "\n",
    "df['Weather'] = le_weather.fit_transform(df['Weather'])\n",
    "df['Temperature'] = le_temp.fit_transform(df['Temperature'])\n",
    "df['Play'] = le_play.fit_transform(df['Play'])\n",
    "\n",
    "# Show the DataFrame\n",
    "print(df)\n",
    "\n",
    "\n",
    "2\n",
    "# Separate features (X) and target variable (y)\n",
    "X = df[['Weather', 'Temperature']]\n",
    "y = df['Play']\n",
    "\n",
    "# Train a Na√Øve Bayes model\n",
    "model = GaussianNB()\n",
    "model.fit(X, y)\n",
    "\n",
    "# Step 3: Prediction for the specific scenario (Overcast, Mild)\n",
    "# We need to encode 'overcast' as 1 and 'mild' as 2 based on the encoding in the dataset\n",
    "input_data = pd.DataFrame([[1, 2]], columns=['Weather', 'Temperature'])\n",
    "\n",
    "# Predict the play decision\n",
    "prediction = model.predict(input_data)\n",
    "\n",
    "# Decode the result back to 'yes'/'no'\n",
    "predicted_play = le_play.inverse_transform(prediction)\n",
    "print(f\"Prediction for Weather=overcast, Temperature=mild: {predicted_play[0]}\")\n",
    "\n",
    "3\n",
    "# Split the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# Train the model on the training data\n",
    "model.fit(X_train, y_train)\n",
    "\n",
    "# Make predictions on the test data\n",
    "y_pred = model.predict(X_test)\n",
    "\n",
    "# Calculate the confusion matrix\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "print(\"Confusion Matrix:\")\n",
    "print(conf_matrix)\n",
    "\n",
    "# Calculate accuracy\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f\"Accuracy: {accuracy:.2f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "4239be25-3158-4841-a7a2-18599b6af4d4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 50.00%\n",
      "Confusion Matrix:\n",
      "[[0 1]\n",
      " [0 1]]\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.metrics import accuracy_score, confusion_matrix\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "data = {\n",
    "    'Country 1': ['Brazil', 'Germany', 'Spain', 'Mexico', 'Netherlands', 'Portugal'],\n",
    "    'Country 2': ['Argentina', 'France', 'Italy', 'USA', 'Belgium', 'Japan'],\n",
    "    'Goals by Country 1': [3, 2, 1, 2, 4, 2],\n",
    "    'Goals by Country 2': [1, 3, 1, 0, 2, 1],\n",
    "    'Played in Round': ['Group Stage', 'Knockout Stage', 'Group Stage', 'Group Stage', 'Knockout Stage', 'Group Stage'],\n",
    "    'Win': [1, 0, 0, 1, 1, 1]\n",
    "}\n",
    "df = pd.DataFrame(data)\n",
    "le = LabelEncoder()\n",
    "df['Country 1'] = le.fit_transform(df['Country 1'])\n",
    "df['Country 2'] = le.fit_transform(df['Country 2'])\n",
    "df['Played in Round'] = le.fit_transform(df['Played in Round'])\n",
    "X = df[['Country 1', 'Country 2', 'Goals by Country 1', 'Goals by Country 2', 'Played in Round']]\n",
    "y = df['Win']\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "nb = GaussianNB()\n",
    "nb.fit(X_train, y_train)\n",
    "y_pred = nb.predict(X_test)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f'Accuracy: {accuracy * 100:.2f}%')\n",
    "conf_matrix = confusion_matrix(y_test, y_pred)\n",
    "print(\"Confusion Matrix:\")\n",
    "print(conf_matrix)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "076749f8-747d-470e-9831-6da1675cd98a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
